{"version":3,"sources":["webpack:///./src/templates/post.jsx","webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./src/components/Egdeworx/Edgeworx.jsx","webpack:///./src/components/SEO/SEO.jsx","webpack:///./node_modules/url-join/lib/url-join.js"],"names":["PostTemplate","render","_this$props","this","props","pageContext","data","slug","postNode","markdownRemark","post","frontmatter","postEdges","allMarkdownRemark","edges","id","category_id","_data_SiteConfig__WEBPACK_IMPORTED_MODULE_5___default","a","postDefaultCategoryID","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","_layout__WEBPACK_IMPORTED_MODULE_3__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","title","siteTitle","_components_SEO_SEO__WEBPACK_IMPORTED_MODULE_4__","postPath","postSEO","className","_components_PostListing_PostListing__WEBPACK_IMPORTED_MODULE_8__","dangerouslySetInnerHTML","__html","html","_components_Egdeworx_Edgeworx__WEBPACK_IMPORTED_MODULE_9__","Component","pageQuery","PostListing","getPostList","postList","forEach","postEdge","push","path","node","type","fields","react__WEBPACK_IMPORTED_MODULE_4___default","map","gatsby__WEBPACK_IMPORTED_MODULE_5__","activeClassName","to","key","__webpack_exports__","Edgeworx","gatsby__WEBPACK_IMPORTED_MODULE_2__","src","alt","react__WEBPACK_IMPORTED_MODULE_1__","SEO","description","image","postURL","postMeta","excerpt","cover","_data_SiteConfig__WEBPACK_IMPORTED_MODULE_4___default","siteLogo","url_join__WEBPACK_IMPORTED_MODULE_3___default","siteUrl","pathPrefix","siteDescription","blogURL","schemaOrgJSONLD","@context","@type","url","name","alternateName","siteTitleAlt","itemListElement","position","item","@id","headline","content","JSON","stringify","property","siteFBAppID","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","strArray","resultArray","match","length","first","shift","replace","i","component","TypeError","str","join","parts","split","normalize","arguments","slice","call","module","exports","undefined","__webpack_require__"],"mappings":"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","file":"component---src-templates-post-jsx-009dc98aae4c2869755a.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport Layout from '../layout';\nimport SEO from '../components/SEO/SEO';\nimport config from '../../data/SiteConfig';\nimport './b16-tomorrow-dark.css';\nimport './post.scss';\nimport PostListing from '../components/PostListing/PostListing';\nimport Edgeworx from \"../components/Egdeworx/Edgeworx\";\n\nexport default class PostTemplate extends React.Component {\n  render() {\n    const { pageContext, data } = this.props;\n    const { slug } = pageContext;\n    const postNode = data.markdownRemark;\n    const post = postNode.frontmatter;\n    const postEdges = data.allMarkdownRemark.edges;\n\n    if (!post.id) {\n      post.id = slug;\n    }\n\n    if (!post.category_id) {\n      post.category_id = config.postDefaultCategoryID;\n    }\n\n\n    return (\n      <Layout>\n        <Helmet>\n          <title>{`${post.title} | ${config.siteTitle}`}</title>\n        </Helmet>\n\n        <SEO postPath={slug} postNode={postNode} postSEO />\n\n        <div className=\"post container\">\n          <div className=\"menu-list\">\n            <PostListing postEdges={postEdges} />\n          </div>\n          <div className=\"post-container bg-grey\">\n            <div dangerouslySetInnerHTML={{ __html: postNode.html }} />\n          </div>\n        </div>\n\n        <Edgeworx />\n      </Layout>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!, $type: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n      }\n      fields {\n        nextTitle\n        nextSlug\n        prevTitle\n        prevSlug\n        slug\n      }\n    }\n    \n    allMarkdownRemark(filter: {frontmatter: { type: { eq: $type } }}) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n              type\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport './PostListing.scss';\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.frontmatter.type + postEdge.node.fields.slug,\n        title: postEdge.node.frontmatter.title\n      });\n    });\n\n    return postList;\n  }\n\n  render() {\n    const postList = this.getPostList();\n\n    return (\n      <div className=\"post-menu\">\n        {postList.map(post => (\n          <Link activeClassName=\"active\" to={post.path} key={post.title}>{post.title}</Link>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n","import React, { Component } from 'react';\nimport { Link } from 'gatsby';\nimport './Edgeworx.scss';\n\nclass Edgeworx extends Component {\n  render() {\n    return (\n      <section className=\"edgeworx\">\n        <section className=\"container\">\n          <section className=\"row align-items-center\">\n            <section className=\"col-md-8\">\n              <h5>Looking for an enterprise solution?</h5>\n              <h3>Run software at the edge with Edgeworx.</h3>\n              <Link className=\"button\" to=\"/\">Learn More</Link>\n            </section>\n\n            <section className=\"col-md-4\">\n              <img src=\"/images/img-gallery-02.png\" alt=\"\" />\n            </section>\n          </section>\n        </section>\n      </section>\n    );\n  }\n}\n\nexport default Edgeworx;\n","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover || config.siteLogo;\n\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n"],"sourceRoot":""}